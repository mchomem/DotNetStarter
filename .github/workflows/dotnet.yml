name: .NET Build, Check, Pack and Publish

on:
  push:
    tags:
      - 'v*.*.*'

  pull_request:
    branches:
      - dev
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0

    # Extrai a versão apenas se for um push de tag
    - name: Extract version from Git tag
      if: startsWith(github.ref, 'refs/tags/v')
      id: extract_version
      run: |
        echo "##[set-output name=VERSION;]${GITHUB_REF#refs/tags/v}"

    # Atualiza a versão no .csproj
    - name: Update version in .csproj
      if: steps.extract_version.outputs.VERSION != ''
      run: |
        sed -i 's|<Version>.*</Version>|<Version>${{ steps.extract_version.outputs.VERSION }}</Version>|g' DotNetStarter.CLI/DotNetStarter.CLI.csproj

    # Restaura as dependências
    - name: Restore dependencies
      run: dotnet restore

    # Compila o projeto
    - name: Build solution
      run: dotnet build --configuration Release

    # Verifica a formatação do código
    - name: Format code
      run: dotnet format ./DotNetStarter.sln

    # Empacota o projeto
    - name: Pack NuGet Package
      if: startsWith(github.ref, 'refs/tags/v')
      run: dotnet pack DotNetStarter.sln --configuration Release -o ./nupkg -p:PackageVersion=${{ steps.extract_version.outputs.VERSION }}

    # Publica no NuGet apenas em eventos de tag
    - name: Publish to NuGet
      if: startsWith(github.ref, 'refs/tags/v')
      run: dotnet nuget push ./nupkg/DotNetStarter.CLI.${{ steps.extract_version.outputs.VERSION }}.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
